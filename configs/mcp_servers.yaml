mcp_servers:
  # Debug server for testing tool calls
  # python_debug:
  #   transport: stdio
  #   command: uv
  #   args: ["run", "python", "mcp_servers/debug_server.py"]
  #   description: "Debug tools for testing MCP integration"
  
  # Proxy status server for monitoring the AI proxy
  python_proxy_status:
    transport: stdio
    command: uv
    args: ["run", "python", "mcp_servers/get_proxy_status.py"]
    description: "Get comprehensive status information about the AI Proxy Server"
  
# Brave Search MCP server for web search capabilities
  brave_search:
    transport: stdio
    command: npx
    args: 
      - "-y"
      - "@modelcontextprotocol/server-brave-search"
    env:
      BRAVE_API_KEY: "BSAlO8nx9QkBoCydxBr1gpnMC1RWvTu"
    description: "Brave Search API integration for web search capabilities"

  # Node.js filesystem MCP server with restrictions
  # nodejs_filesystem:
  #   transport: stdio
  #   command: npx
  #   args: 
  #     - "-y"
  #     - "@modelcontextprotocol/server-filesystem"
  #     - "./test_scripts"    # Only allow access to test_scripts directory
  #     - "./configs"         # Only allow access to configs directory  
  #   description: "Restricted Node.js filesystem MCP server"
  #   # Additional configuration options available:
  #   # - The server automatically restricts access to only specified directories
  #   # - File operations are sandboxed to these paths
  #   # - No additional YAML config needed - restrictions are built-in
  
  # Example file system server (disabled for testing)
  # filesystem:
  #   transport: stdio
  #   command: mcp-filesystem-server
  #   args: ["--root", "./safe_directory"]
  #   description: "Safe file system access"
  
  # Example database server (disabled for testing)
  # database:
  #   transport: stdio
  #   command: mcp-sqlite-server
  #   args: ["--db-path", "data/app.db"]
  #   description: "Database operations"
  
  # Example HTTP-based MCP server (disabled for testing)
  # external_api:
  #   transport: http
  #   server_url: "http://localhost:8080/mcp"
  #   auth:
  #     type: bearer
  #     token: "your_token_here"
  #   description: "External API integration"
  
  # Context7 online MCP server (disabled for testing)
  # context7:
  #   transport: http
  #   server_url: "https://mcp.context7.com/mcp"
  #   description: "Context7 online documentation server"

  # Example: Context7 local MCP server (if you want to run it locally)
  # context7_local:
  #   transport: stdio
  #   command: npx
  #   args: ["-y", "@upstash/context7-mcp@latest"]
  #   env:
  #     DEFAULT_MINIMUM_TOKENS: "15000"  # Force much larger responses to test env var
  #     NODE_ENV: "development"          # Optional: development mode
  #   description: "Context7 local documentation server"

# Configuration notes:
# - stdio transport: Runs a subprocess and communicates via stdin/stdout
# - http transport: Connects to HTTP-based MCP servers
# - command: The executable to run for stdio transport
# - args: Command line arguments
# - env: Environment variables to set
# - server_url: URL for HTTP transport
# - auth: Authentication for HTTP transport 